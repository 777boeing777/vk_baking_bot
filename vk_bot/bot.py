import requests
from random import randint
import threading
from .types import Message, UsersList


class VKBot:
    """
    __longpoll_url: (–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è) https://dev.vk.com/method/groups.getLongPollServer
    __send_message_url: (–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è) https://dev.vk.com/method/messages.send
    __photo_server_url: (–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è) https://dev.vk.com/method/photos.getMessagesUploadServer
    __save_photo_url: (–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è) https://dev.vk.com/method/photos.saveMessagesPhoto
    __version: –í–µ—Ä—Å–∏—è API
    __group_id: ID –≥—Ä—É–ø–ø—ã –≤ VK
    logger: –õ–æ–≥–≥–µ—Ä
    users_list: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑—É—é—Ç—Å—è –±–æ—Ç–æ–º
    word_to_prev_state: –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –º–∞—à–∏–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    """

    __longpoll_url = 'https://api.vk.com/method/groups.getLongPollServer'
    __send_message_url = 'https://api.vk.com/method/messages.send'
    __photo_server_url = "https://api.vk.com/method/photos.getMessagesUploadServer"
    __save_photo_url = "https://api.vk.com/method/photos.saveMessagesPhoto"

    __version = '5.131'
    __group_id = '218434110'
    logger = None
    users_list = UsersList()
    word_to_prev_state = "–ù–∞–∑–∞–¥ üõë"

    def __init__(self, token):
        """

        :param token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞
        :var self._data: key, server, ts –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
        :var self.message_handlers: –°–ø–∏—Å–æ–∫ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º message_handler).
        """
        self.__token = token
        self._data = self.get_longpoll_data()

        self.message_handlers = []

        for key, value in self._data.items():
            setattr(self, key, value)

        self.logger.info("VK Bot was successfully initialized ü§ñ.")

    def get_longpoll_url_params(self):
        return {
            'access_token': self.__token,
            'v': self.__version,
            'group_id': self.__group_id,
        }

    def get_longpoll_data(self):
        response = requests.get(self.__longpoll_url, params=self.get_longpoll_url_params())

        if response.status_code == 200:
            return response.json()['response']

    def _get_longpoll_check_params(self):
        params = {
            key: f'{getattr(self, key)}' for key in self._data
        }
        params['wait'] = 15
        params['act'] = 'a_check'

        return params

    def _get_photo_server(self):
        """
        –§—É–Ω–∫—Ü–∏—è –¥–µ–ª–∞—é—â–∞—è –∑–∞–ø—Ä–æ—Å –Ω–∞ "https://api.vk.com/method/photos.getMessagesUploadServer"

        :return: url, –∫—É–¥–∞ –≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–∫–∏
        """
        response = requests.get(self.__photo_server_url, params={'access_token': self.__token, 'v': self.__version})
        upload_url = response.json()['response']['upload_url']
        return upload_url

    def _save_photo(self, hash, server, photo):
        """
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ URL,
        –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è _get_photo_server

        """
        params = {
            'access_token': self.__token,
            'v': self.__version,
            'hash': hash,
            'server': server,
            'photo': photo
        }

        response = requests.post(self.__save_photo_url, data=params)

        owner_id = response.json()['response'][0]['owner_id']
        id_ = response.json()['response'][0]['id']

        return f'photo{owner_id}_{id_}'

    def get_photo(self, photo):
        """
        :param photo: –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        upload_url = self._get_photo_server()
        response = requests.post(upload_url, files={'photo': photo})

        return self._save_photo(**response.json())

    def send_message(self, user_id, text, keyboard=None, photo=None):
        """
        :param user_id: –ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        :param text: –ß—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        :param keyboard: –ï—Å—Ç—å –ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        :param photo: –ï—Å—Ç—å –ª–∏ —Ñ–æ—Ç–∫–∞
        """
        if photo:
            photo = self.get_photo(photo)

        params = {
            'user_id': user_id,
            'random_id': randint(-(10 ** 7), 10 ** 7),
            'message': text,
            'access_token': self.__token,
            'v': self.__version,
            'keyboard': keyboard,
            'attachment': photo
        }

        self.logger.debug(f"ü§ñ will send the message with params:\n{params}")
        requests.post(self.__send_message_url, data=params)
        self.logger.info(f"ü§ñ has sent the message: '{text}'")

    def longpolling(self):
        """
        –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª–∏–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        :return:
        """
        params = self._get_longpoll_check_params()
        server = params['server']
        self.logger.debug(f"ü§ñ will send the request to the server: {server}\nparams: {params}")

        with requests.Session() as session:
            while True:
                self.logger.info(f"ü§ñ has sent a long request and waiting for the event...")
                response = session.get(server, params=params)
                params['ts'] = self.get_longpoll_data()['ts']

                if response.json().get('updates'):
                    self.logger.debug(f"ü§ñ just got a new updates.")
                    data = response.json()
                    event_type = data.get('updates')[0].get('type')
                    if event_type == "message_new":
                        self.logger.info(f"ü§ñ just got a message. He is thinking what he need answer...")
                        threading.Thread(target=self._handle, args=(Message(data),)).start()

    @staticmethod
    def _build_handler_dict(handler, **kwargs):
        """
        :param handler: –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–¥ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º message_handler)
        :param kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
        :return:
        """
        handler_dict = {
            key: kwargs[key] for key in kwargs
        }
        handler_dict['function'] = handler

        return handler_dict

    def message_handler(self, commands=None, state=None, need_to_miss_if_back=None):
        """
        :param commands: –ö–æ–º–∞–Ω–¥—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è
        :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ—Ç–æ—Ä–∞—è –æ–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        :param need_to_miss_if_back: –ù—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–ù–∞–∑–∞–¥"
        :return:
        """

        def wrapper(handler):
            """
            –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤, —Å–æ–∑–¥–∞–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –≤ —Å–ø–∏—Å–æ–∫
            :param handler:
            :return:
            """

            if state:
                state.value = handler
                state.need_to_miss_if_back = need_to_miss_if_back
                state.add_to_scenario()

                self.logger.info(f"Scenario was successfully updated: {state.scenario}")

            handler_dict = self._build_handler_dict(
                state or handler, commands=commands if commands else [], state=state
            )

            self.message_handlers.append(handler_dict)
            return handler

        return wrapper

    def _handle(self, message):
        """
        –ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—Å—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π, —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–æ, –∫–∞–∫–æ–π —Å—Ä–∞–±–æ—Ç–∞–µ—Ç message_handler.
        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return:
        """
        user = self.users_list.get_user_by_id(message.user_id)

        if not user or message.text == "–ú–µ–Ω—é üîç":
            return self.main_menu(message)

        self.logger.info(f"User has {user.state} state.")

        if message.text == self.word_to_prev_state:
            return self.get_previous_state(user, message)

        if not user.state:
            is_specified = self.set_user_state(user, message)
            if not is_specified:
                return self.unknown_command(message)
            return user.state.value(message)

        if user.state.next:
            user.state = user.state.next
            return user.state.value(message)

        return user.state.value(message)

    def set_user_state(self, user, message):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ
        :return:
        """
        for handler in self.message_handlers:
            if message.text in handler['commands']:
                state = handler['state']

                if state == state.scenario[0]:
                    user.state = handler['state']
                    return True

    def get_previous_state(self, user, message):
        """
        –†–∞–±–æ—Ç–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π "–ù–∞–∑–∞–¥ üõë". –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        :param user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ
        :return: State.value
        """
        if user.state:
            if user.state.prev:
                user.state = user.state.prev
                while user.state.need_to_miss_if_back:
                    user.state = user.state.prev
                return user.state.value(message)
            else:
                return self.main_menu(message)

    @staticmethod
    def unknown_command(message):
        """
        –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ–Ω –≤–≤–æ–¥–∏—Ç –Ω–µ–∑–Ω–∞–∫–æ–º—É—é –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É.
        –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–µ
        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ
        :return:
        """
        pass

    @staticmethod
    def main_menu(message):
        """
        –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç "–ú–µ–Ω—é üîç" –ò–õ–ò –æ–Ω –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–µ
        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ
        :return:
        """
        pass
