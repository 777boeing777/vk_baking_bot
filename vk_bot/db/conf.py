from sqlalchemy import create_engine, select, Column, ForeignKey, Integer, String
from sqlalchemy.orm import sessionmaker, declarative_base, relationship
from contextlib import suppress
from sqlalchemy.exc import NoResultFound

Base = declarative_base()

engine = create_engine(fr"sqlite:///database.db", echo=True, future=True)


class Category(Base):
    __tablename__ = "category"

    id = Column(Integer, primary_key=True)
    name = Column(String(40))

    products = relationship(
        "Product", back_populates="category", cascade="all, delete-orphan"
    )

    def __repr__(self):
        return f"Category(id={self.id}, name={self.name})"


class Product(Base):
    __tablename__ = "product"

    id = Column(Integer, primary_key=True)
    name = Column(String(40))
    description = Column(String(512))

    image = Column(String(256))

    category_id = Column(Integer, ForeignKey('category.id'), nullable=False)

    category = relationship("Category", back_populates="products")

    def __repr__(self):
        return f"Product(id={self.id}, name={self.name}, category={self.category})"


Base.metadata.create_all(engine)


class DBManager:
    session = sessionmaker(bind=engine)

    def __init__(self):
        self.delete()
        self.init_data()

    def delete(self):
        with self.session() as sess:
            sess.query(Category).delete(synchronize_session='fetch')
            sess.query(Product).delete(synchronize_session='fetch')
            sess.commit()

    def init_data(self):
        with self.session() as session:
            exclusive_baking = Category(name="–ê–≤—Ç–æ—Ä—Å–∫–∞—è –≤—ã–ø–µ—á–∫–∞ üç∞")
            croissants = Category(name="–ö—Ä—É–∞—Å—Å–∞–Ω—ã ü•ê")
            donuts = Category(name="–ü–æ–Ω—á–∏–∫–∏ üç©")
            cakes = Category(name="–¢–æ—Ä—Ç—ã üéÇ")

            chocolate_donut = Product(
                name="–ü–æ–Ω—á–∏–∫ —à–æ–∫–æ–ª–∞–¥–Ω—ã–π",
                description="–ù–∞—à–∏ —à–æ–∫–æ–ª–∞–¥–Ω—ã–µ –ø–æ–Ω—á–∏–∫–∏ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –∏–∑ 80% —Ç–µ–º–Ω–æ–≥–æ —à–æ–∫–æ–ª–∞–¥–∞!",
                image=r"media/donuts/chocolate_donut.jpg",
                category=donuts,
            )

            strawberry_donut = Product(
                name="–ü–æ–Ω—á–∏–∫ –∫–ª—É–±–Ω–∏—á–Ω—ã–π",
                description="–ù–∞—à–∏ –∫–ª—É–±–Ω–∏—á–Ω—ã–µ –ø–æ–Ω—á–∏–∫–∏ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –∏–∑ –Ω–∞—Å—Ç–æ—è—â–µ–π –∫–ª—É–±–Ω–∏–∫–∏!",
                image=r"media/donuts/strawberry_donut.jpg",
                category=donuts,
            )

            chocolate_croissant = Product(
                name="–ö—Ä—É–∞—Å—Å–∞–Ω —à–æ–∫–æ–ª–∞–¥–Ω—ã–π",
                description="–ù–∞—à–∏ —à–æ–∫–æ–ª–∞–¥–Ω—ã–µ –∫—Ä—É–∞—Å—Å–∞–Ω—ã –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –∏–∑ 80% —Ç–µ–º–Ω–æ–≥–æ —à–æ–∫–æ–ª–∞–¥–∞!",
                image=r"media/croissants/chocolate_croissant.jpg",
                category=croissants,
            )

            strawberry_croissant = Product(
                name="–ö—Ä—É–∞—Å—Å–∞–Ω –∫–ª—É–±–Ω–∏—á–Ω—ã–π",
                description="–ù–∞—à–∏ –∫–ª—É–±–Ω–∏—á–Ω—ã–µ –∫—Ä—É–∞—Å—Å–∞–Ω—ã –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –∏–∑ –Ω–∞—Å—Ç–æ—è—â–µ–π –∫–ª—É–±–Ω–∏–∫–∏!",
                image=r"media/croissants/strawberry_croissant.jpg",
                category=croissants,
            )

            vanilla_croissant = Product(
                name="–ö—Ä—É–∞—Å—Å–∞–Ω –≤–∞–Ω–∏–ª—å–Ω—ã–π",
                description="–ù–∞—à–∏ –≤–∞–Ω–∏–ª—å–Ω—ã–π –∫—Ä—É–∞—Å—Å–∞–Ω –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω –∏–∑ –Ω–∞—Å—Ç–æ—è—â–µ–π –≤–∞–Ω–∏–ª–∏!",
                image=r"media/croissants/vanilla_crossant.jpg",
                category=croissants,
            )

            napoleon = Product(
                name="–ù–∞–ø–æ–ª–µ–æ–Ω",
                description="–ù–∞—à —Ç–æ—Ä—Ç –Ω–∞–ø–æ–ª–µ–æ–Ω —Å–¥–µ–ª–∞–Ω –∏–∑ —Å–∞–º—ã—Ö –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.",
                image=r"media/exclusive_baking/–Ω–∞–ø–æ–ª–µ–æ–Ω.jpg",
                category=exclusive_baking
            )

            tiramisu = Product(
                name="–¢–∏—Ä–∞–º–∏—Å—É",
                description="–ù–∞—à–µ —Ç–∏—Ä–∞–º–∏—Å—Å—É –ø—Ä–æ—Å—Ç–æ —Ç–∞–µ—Ç –≤–æ —Ä—Ç—É, –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º!",
                image=r"media/exclusive_baking/—Ç–∏—Ä–∞–º–∏—Å—É.png",
                category=exclusive_baking
            )

            sharlotka = Product(
                name="–®–∞—Ä–ª–æ—Ç–∫–∞",
                description="–ù–∞—à–∞ —à–∞—Ä–ª–æ—Ç–∫–∞ —Å–¥–µ–ª–∞–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö —Å–ø–µ–ª—ã—Ö —è–±–ª–æ–∫, —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å –ª—é–±–æ–≤—å—é.",
                image=r"media/exclusive_baking/sharlotka.jpg",
                category=exclusive_baking
            )

            blue_velvet = Product(
                name="–°–∏–Ω–∏–π –±–∞—Ä—Ö–∞—Ç",
                description="–ù–∞—à —Å–∏–Ω–∏–π –±–∞—Ä—Ö–∞—Ç —Å–¥–µ–ª–∞–Ω –∏–∑ —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö —Å–ª–∏–≤–æ–∫, —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å –ª—é–±–æ–≤—å—é.",
                image=r"media/cakes/—Å–∏–Ω–∏–π –±–∞—Ä—Ö–∞—Ç.jpg",
                category=cakes
            )

            red_velvet = Product(
                name="–ö—Ä–∞—Å–Ω—ã–π –±–∞—Ä—Ö–∞—Ç",
                description="–ù–∞—à –∫—Ä–∞—Å–Ω—ã–π –±–∞—Ä—Ö–∞—Ç —Å–¥–µ–ª–∞–Ω –∏–∑ —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö —Å–ª–∏–≤–æ–∫, —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å –ª—é–±–æ–≤—å—é.",
                image=r"media/cakes/–∫—Ä–∞—Å–Ω—ã–π –±–∞—Ä—Ö–∞—Ç.jpg",
                category=cakes
            )

            honey = Product(
                name="–ú–µ–¥–æ–≤–∏–∫",
                description="–ù–∞—à –º–µ–¥–æ–≤–∏–∫ —Å–¥–µ–ª–∞–Ω –∏–∑ —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö —Å–ª–∏–≤–æ–∫,"
                            " —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å –ª—é–±–æ–≤—å—é —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –º–µ–¥–∞.",
                image=r"media/cakes/–º–µ–¥–æ–≤–∏–∫.jpg",
                category=cakes
            )

            praga = Product(
                name="–ü—Ä–∞–≥–∞",
                description="–ù–∞—à–∞ –ø—Ä–∞–≥–∞ —Å–¥–µ–ª–∞–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö —Å–ª–∏–≤–æ–∫,"
                            " —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å –ª—é–±–æ–≤—å—é. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!",
                image=r"media/cakes/–ø—Ä–∞–≥–∞.jpg",
                category=cakes
            )

            session.add_all(
                [
                    donuts, croissants, exclusive_baking, cakes,
                    vanilla_croissant, chocolate_croissant,
                    strawberry_croissant, chocolate_donut,
                    strawberry_donut, napoleon, sharlotka, tiramisu,
                    blue_velvet, red_velvet, praga, honey
                ]
            )

            session.commit()

    def get_categories(self):
        stmt = select(Category)
        yield from self.session().scalars(stmt).all()

    def get_products(self, category):
        with suppress(NoResultFound):
            stmt = select(Category).where(Category.name == category)
            category = self.session().scalars(stmt).one()

            stmt = select(Product).join(Category.products).where(Product.category_id == category.id)
            yield from self.session().scalars(stmt).all()

    def get_product(self, product_name):
        with suppress(NoResultFound):
            stmt = select(Product).where(Product.name == product_name)
            return self.session().scalars(stmt).one()


def get_db_manager():
    return DBManager()
